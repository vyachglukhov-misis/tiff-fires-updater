import fs from "fs"
import path from "path"
import * as turf from "@turf/turf"
import { toMercator } from "@turf/projection"
import gdal from "gdal-async"
import type { Feature } from "geojson"


const OUT_DIR = path.join('/home/dev/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/fires-updater/src', "/tiles")
if (!fs.existsSync(OUT_DIR)) fs.mkdirSync(OUT_DIR)

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é feature –≤ TIFF-—Ñ–∞–π–ª, –ø–∏–∫—Å–µ–ª—è–º–∏ 90x90 –º
 * @param feature GeoJSON Feature –≤ WGS84
 * @param tileName –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export const writeToTileFeature = async (feature: Feature, tileName: string) => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º feature –≤ –º–µ—Ç—Ä—ã (Web Mercator)
    const projected = toMercator(feature)
    const tileGeom = gdal.Geometry.fromGeoJson(projected.geometry)

    const [minX, minY, maxX, maxY] = turf.bbox(projected)

    const pixelSize = 90
    const xSize = Math.ceil((maxX - minX) / pixelSize)
    const ySize = Math.ceil((maxY - minY) / pixelSize)

    if (xSize === 0 || ySize === 0) {
        console.warn("üü° –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∞–π–ª: —Ä–∞–∑–º–µ—Ä –ø–æ X –∏–ª–∏ Y —Ä–∞–≤–µ–Ω 0")
        return
    }

    const tiffPath = path.join(OUT_DIR, `${tileName}.tif`)
    const driver = gdal.drivers.get("GTiff")

    const dataset = driver.create(tiffPath, xSize, ySize, 1, gdal.GDT_Byte, [
        "TILED=YES",
        "COMPRESS=DEFLATE",
        "BIGTIFF=IF_SAFER"
    ])

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–ø—Ä–∏–≤—è–∑–∫—É (GeoTransform)
    dataset.geoTransform = [minX, pixelSize, 0, maxY, 0, -pixelSize]

    const band = dataset.bands.get(1)
    const data = Buffer.alloc(xSize * ySize)

    for (let y = 0; y < ySize; y++) {
        for (let x = 0; x < xSize; x++) {
            // –¶–µ–Ω—Ç—Ä –ø–∏–∫—Å–µ–ª—è
            const px = minX + x * pixelSize + pixelSize / 2
            const py = maxY - y * pixelSize - pixelSize / 2

            const point = new gdal.Point(px, py)
            const inside = tileGeom.contains(point)

            data[y * xSize + x] = inside ? Math.floor(Math.random() * 256) : 0
        }

    }

    band.pixels.write(0, 0, xSize, ySize, data)

    dataset.flush()
    dataset.close()

    console.log(`‚úÖ TIFF "${tileName}.tif" —Å–æ–∑–¥–∞–Ω. –†–∞–∑–º–µ—Ä: ${xSize}x${ySize} px`)
}
